@startuml DiagrammeUML
class Joueur
class Carte
class GameManager
class PlaceTerrain
class PlaceDeck
class CarteSettings
class GrosseCarte
class ChoixDeFamille
class MainMenu
class BoutonChoix
class JoueurManager

Joueur -- PlaceTerrain : < est associé à 1
Joueur - GameManager : > participe à 1
Carte - Joueur : < possède 0..n
Carte - GameManager : > compose n..m
CarteSettings -- Carte : < est lié à 1
BoutonChoix - GameManager
ChoixDeFamille - MainMenu 
MainMenu - GameManager
GrosseCarte - Carte
PlaceDeck - Joueur
PlaceDeck -- GameManager
PlaceTerrain -- GameManager


class Joueur {
    Id : int
    Prenom : string
    Email : string
    List <> Deck : List<PlaceDeck>
    List <> Terrain : List<PlaceTerrain>
    List <> CartesPossedees : List<Carte>
    APioche : bool

    Start()
    TrouverStratege()
}

class PlaceTerrain {
    Id : int
    CartePlacee : Carte
    JeuEnCours : GameManager
    Appartenance : Joueur

    Start()
    Initialiser()
    OnDrop()
    OnPointerDown()
}

class PlaceDeck {
    Id : int
    Appartenance : Joueur
    availableCarteSlots : bool
    CartePlacee : Carte
    rectTransform : RectTransform
}

class GameManager {
    J1 : Joueur
    J2 : Joueur
    JoueurActif : Joueur
    JoueurPassif : Joueur
    List<> FamillesChoisies : List<string>
    List<> ToutesLesCartes : List<Carte>
    List<> Pioche : List<Carte>
    List<> Defausse : List<Carte>
    List<> CartesMontrables : List<CarteSettings>
    List<> ToutTerrain : List<PlaceTerrain>
    List<> BoutonsDeJeu : List<BoutonChoix>
    grosseCarte : GrosseCarte
    CarteMontree : Carte
    CarteCiblee : Carte
    DegatCiblee : int
    TerrainCiblee : PlaceTerrain
    DossierTerrain : GameObject 
    FondColore : GameObject 
    Selection : Image 
    ImageDosCarte : Sprite 
    Tour : int
    PMEnCours : float 
    PMEnCoursTexte : Text
    WarningTexte : Text
    ActionEnCoursTexte : Text
    TypePartie : string
    EnTrainCibleCarte : bool
    EnTrainCibleTerrain : bool
    JoueurManager : JoueurManager

    Start()
    NouvellePartie()
    Piocher()
    ChangerDeTour()
    ChoixDeStratege()
    StrategeSeul()
    Warning (string texteDonne) 
    AfficherPM()
    Attaquer()
    AttendreCiblee()
    SeDeplacer()
    AttendreTerrainCiblee()
    Retirer()
    Echanger()
    AttendreCibleeEchange()
    VerifierTerrainACote(int terrain)
    MontrerBoutonsChoix(string situation)
    EnleverBonBoutons()
    EchangeDeTerrain(Joueur J1)
    CacherGrandeCarte()
    MontrerGrandeCarte(Carte carteMontree)
    ConditionDeVictoire()
    VerifierEgalite()
    Pouvoir()
    CreerLien()
    Teleporter()
    Immobiliser()
    Cible(string p, int degat, bool surSoi )
    CiblePV()
    ChangerPouvoir()
    MourirCiblee()
    CouperLiens()
    CommencerPouvoir(string texte, bool carteCiblee)
    FinirPouvoir(string texte, bool carteCiblee, bool enleverPM )
}

class CarteSettings {
    Id : int
    Prenom : string
    Image : sprite
    PM : int
    PV : int
    PA : int
    IdPouvoir : int
    Pouvoir : string
    CoutPouvoir : int
    
    PVar : int
    IdPouvoirVar : int
    PouvoirVar : string
    CoutPouvoirVar : int
    
    Famille : string
    FamilleImage : sprite
    Type : string
    TypeImage : sprite

    List <> liens : List<Carte>
    List <> liensVar : List<Carte>
}

class Carte {
    canvas : Canvas 
    canvasGroup : CanvasGroup 
    rectTransform : RectTransform

    Id : int 
    Stats : CarteSettings
    List<> Liens = new List<Carte>()
    EstCachee : bool 
    EstEnJeu : bool 
    Stratege : bool 
    AUtilisePouvoir : bool 
    Immobile : int

    Appartenance : Joueur  
    PositionBase : Vector2
    JeuEnCours : GameManager
    PlaceDeDeck : PlaceDeck
    PlaceDeTerrain : PlaceTerrain

    PrenomT : string
    ImageT : sprite
    PMT : text
    PVT : text
    PAT : text
    CoutPouvoirT : text
    
    FamilleImageT : sprite
    TypeImageT : sprite
    LienT : text

    Montrer()
    MontrerLiens()
    Commencer()
    Initialiser()
    Mourir()
    Agrandir()
    Retrecir()
    MettreBonBoutons()
    CacherCarte()
    RetournerCarte()
    OnBeginDrag()
    OnDrag()
    OnEndDrag()
    OnPointerDown()
}

class GrosseCarte {
    Carte : CarteSettings 
    Text: Text
    ImageT : Image
    PMT : Text
    PVT : Text
    PAT : Text
    PouvoirT : Text
    CoutPouvoirT: Text
    FamilleImageT : Image
    TypeImageT : Image
    LiensT: Text

    Start()
    Montrer()
    MontrerLiens()
    SeDecaler(CarteSettings, Bool)
}

class ChoixDeFamille {
    EstActive : bool
    Famille : string
    Menu : MainMenu 

    Start()
    SelectionnerFamille()
    SelectionnerTypePartie()
}

class MainMenu {
    JoueurManager : JoueurManager
    JeuEnCours : GameManager 
    Ecran : GameObject 
    MenuPauseUI : GameObject 
    BoutonNext : Button
    List<PlaceTerrain> ToutTerrain
    ImageGrandePartie : GameObject 
    JeuEnPause : bool

    Start()
    Jouer()
    InitialiserPetitePartie()
    InitialiserLonguePartie()
    PlacerDeck(Joueur)
    Quitter()
    Reprendre()
    Pause()
    RetourAuMenu()
    Famille()
    MAJ()
    Update()
}

class BoutonChoix {
    Utilite : string
    JeuEnCours : GameManager
    EstMontree : bool

    Start()
    Montrer()
    Cacher()
}

class JoueurManager {
    PrefabCarte : GameObject
    PrefabTerrain : GameObject
    PrefabDeck : GameObject
    JeuEnCours : GameManager
    MenuEnCours : MainMenu
    DossierCarte : GameObject
    DossierDeck : GameObject
    Canvas : Canvas

    OnStartClient()
    OnStartServer()
    CmdInstancier()
    CmdPiocher(GameObject)
    RpcShowCard(GameObject, string)
}

@enduml